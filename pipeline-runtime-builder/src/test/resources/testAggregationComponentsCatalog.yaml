source1:
  type: inlineSource
  data:
    - { key: "a", value: 1 }
    - { key: "a", value: 1 }
    - { key: "a", value: 1 }
    - { key: "b", value: 100 }
    - { key: "b", value: 200 }
    - { key: "c", value: 1 }
  schema: "`key` STRING,`value` INT"

source2:
  type: inlineSource
  data:
    - { key: "d", value: 1 }
    - { key: "d", value: 2 }
    - { key: "d", value: 3 }
    - { key: "a", value: 3 }
  schema: "`key` STRING,`value` INT"

tx:
  type: sql
  using: [ source1, source2 ]
  udfs:
    ofClasses:
      - dataengine.pipeline.runtime.builder.dataset.TestUdafAvg
      - dataengine.pipeline.runtime.builder.dataset.TestIntUdf
  sql: >
    select
      key,
      sum(value) as sum,
      count(value) as count,
      collect_set(source) as sources,
      avg(value) as avgBuiltin,
      avvg(value) as avg
    from (
          select *, "source1" as source from source1
          union all
          select *, "source2" as source from source2
    )
    group by key
