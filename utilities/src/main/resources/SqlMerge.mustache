// start of code generated by a utility

{{#merges}}
    /**
     * Applies a sql merge transformation to all the input DataPipes.
     *
    {{#i}}
     * @param sourceName{{this}}  name of input dataset #{{this}}
    {{/i}}
     * @param sql sql transformation
    {{#i}}
     * @param <S{{this}}>   type of the input dataset #{{this}}
    {{/i}}
     * @return outcome of the merge operation
     */
    public static <{{#i}}{{^-first}}, {{/-first}}S{{this}}{{/i}}> Data{{number}}Transformation<{{#i}}{{^-first}}, {{/-first}}S{{this}}{{/i}}, Row> sqlMerge(
        {{#i}}
        @Nonnull String sourceName{{this}},
        {{/i}}
        @Nonnull String sql) {
        return ({{#i}}{{^-first}}, {{/-first}}s{{this}}{{/i}}) -> {
            SparkSqlUnresolvedRelationResolver resolver = SparkSqlUnresolvedRelationResolver.builder()
            {{#i}}
                .plan(sourceName{{this}}, s{{this}}.logicalPlan())
            {{/i}}
                .build();
            return resolver.resolveAsDataset(SparkSession.active(), sql);
        };
    }

{{/merges}}