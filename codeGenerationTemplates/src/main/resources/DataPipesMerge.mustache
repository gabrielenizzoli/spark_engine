
    public interface Data3Transformation<S1, S2, S3, D> {

        Dataset<D> apply(Dataset<S1> s1Dataset,
                         Dataset<S2> s2Dataset,
                         Dataset<S3> s3Dataset);

        default <D2> Data3Transformation<S1, S2, S3, D2> andThen(DataTransformation<D, D2> tx) {
            return (s1, s2, s3) -> tx.apply(apply(s1, s2, s3));
        }

        default <D2> Data3Transformation<S1, S2, S3, D2> andThenEncode(Encoder<D2> encoder) {
            return andThen(Transformation.encode(encoder));
        }

    }

    public static <S1, S2, S3, D> DataPipe<D> mergeAll(
            DataPipe<S1> pipe1,
            DataPipe<S2> pipe2,
            DataPipe<S3> pipe3,
            Data3Transformation<S1, S2, S3, D> merger) {
        Dataset<D> mergedDataset = merger.apply(pipe1.dataset, pipe2.dataset, pipe3.dataset);
        return new DataPipe<>(mergedDataset);
    }